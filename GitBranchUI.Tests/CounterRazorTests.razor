@inherits TestContext

@using GitBranchUI

@code {
    [Fact]
    public void NoCommits_EmptySvg()
    {
        // Arrange, Act
        var cut = Render(@<GitBranchTree />);

        // Assert
        cut.Find("svg").MarkupMatches(@<svg width="0" height="0" ></svg>);
    }

    [Fact]
    public void ComplexExample_Svg()
    {
        // Arrange
        var commits = new List<BaseCommit>();
        var master = new Branch("master");
        commits.Add(new Init("0", master));
        commits.Add(new Commit("1", master, commits[0]));
        commits.Add(new Commit("2", master, commits[1]));
        var slave = new Branch("slave");
        commits.Add(new Init("3", slave));
        commits.Add(new Commit("4", slave, commits[3]));
        commits.Add(new Commit("5", master, commits[2]));
        var feature = new Branch("feature");
        commits.Add(new Commit("6", feature, commits[5]));
        commits.Add(new Merge("7", slave, feature, commits[6]));
        commits.Add(new Commit("8", slave, commits[4]));
        commits.Add(new Merge("9", slave, master, commits[5]));
        commits.Add(new Commit("10", feature, commits[7]));
        commits.Add(new Merge("11", feature, master, commits[9]));
        commits.Add(new Merge("12", master, slave, commits[8]));
        commits.Add(new Merge("13", master, feature, commits[10]));

        // Act
        var cut = Render(@<GitBranchTree Commits=@commits />);

        // Assert
        cut.Find("svg").MarkupMatches(
            @<svg width="60" height="280" >
            <circle cx="10" cy="270" r="3" >
                <title >0</title>
            </circle>
            <circle cx="10" cy="250" r="3" >
                <title >1</title>
            </circle>
            <path d="M 10 270 L 10 250" ></path>
            <circle cx="10" cy="230" r="3" >
                <title >2</title>
            </circle>
            <path d="M 10 250 L 10 230" ></path>
            <circle cx="30" cy="210" r="3" >
                <title >3</title>
            </circle>
            <circle cx="30" cy="190" r="3" >
                <title >4</title>
            </circle>
            <path d="M 30 210 L 30 190" ></path>
            <circle cx="10" cy="170" r="3" >
                <title >5</title>
            </circle>
            <path d="M 10 230 L 10 170" ></path>
            <circle cx="30" cy="150" r="3" >
                <title >6</title>
            </circle>
            <path d="M 10 170 L 20 170 Q 30 170 30 160 L 30 150" ></path>
            <circle cx="30" cy="130" r="3" >
                <title >7</title>
            </circle>
            <path d="M 30 150 L 30 130" ></path>
            <path d="M 30 190 L 30 130" ></path>
            <circle cx="50" cy="110" r="3" >
                <title >8</title>
            </circle>
            <path d="M 30 190 L 40 190 Q 50 190 50 180 L 50 110" ></path>
            <circle cx="10" cy="90" r="3" >
                <title >9</title>
            </circle>
            <path d="M 10 170 L 10 90" ></path>
            <path d="M 50 110 L 50 100 Q 50 90 40 90 L 10 90" ></path>
            <circle cx="30" cy="70" r="3" >
                <title >10</title>
            </circle>
            <path d="M 30 130 L 30 70" ></path>
            <circle cx="10" cy="50" r="3" >
                <title >11</title>
            </circle>
            <path d="M 10 90 L 10 50" ></path>
            <path d="M 30 70 L 30 60 Q 30 50 20 50 L 10 50" ></path>
            <circle cx="50" cy="30" r="3" >
                <title >12</title>
            </circle>
            <path d="M 50 110 L 50 30" ></path>
            <path d="M 10 50 L 10 40 Q 10 30 20 30 L 50 30" ></path>
            <circle cx="30" cy="10" r="3" >
                <title >13</title>
            </circle>
            <path d="M 30 70 L 30 10" ></path>
            <path d="M 10 50 L 10 20 Q 10 10 20 10 L 30 10" ></path>
            </svg>);
    }

    [Fact]
    public void AddTheSameCommit()
    {
        // Arrange
        var commits = new List<BaseCommit>();
        var master = new Branch("master");
        var commit = new Init("0", master);
        commits.Add(commit);
        commits.Add(commit);

        // Act
        var cut = Render(@<GitBranchTree Commits=@commits />);

        // Assert
        cut.Find("span").MarkupMatches(@<span>Trying to add a commit 0 that has already added.</span>);
    }

    [Fact]
    public void AddInitCommitTwiceForTheSameBranch()
    {
        // Arrange
        var commits = new List<BaseCommit>();
        var master = new Branch("master");
        commits.Add(new Init("0", master));
        commits.Add(new Init("1", master));

        // Act
        var cut = Render(@<GitBranchTree Commits=@commits />);

        // Assert
        cut.Find("span").MarkupMatches(@<span>Trying to add init commit 1 for a branch master that exists.</span>);
    }

    [Fact]
    public void AddCommitWithIncorrectPreviousCommit()
    {
        // Arrange
        var commits = new List<BaseCommit>();
        var master = new Branch("master");
        commits.Add(new Init("0", master));
        commits.Add(new Commit("1", master, commits[0]));
        var fakeCommit = new Commit("xxx", master, commits[1]);
        commits.Add(new Commit("2", master, fakeCommit));

        // Act
        var cut = Render(@<GitBranchTree Commits=@commits />);

        // Assert
        cut.Find("span").MarkupMatches(@<span>Incorrect state. Previous commit is xxx for commit 2, but last point commit is 1.</span>);
    }

    [Fact]
    public void AddCommitToNonExistingBranchWithIncorrectPreviousCommit()
    {
        // Arrange
        var commits = new List<BaseCommit>();
        var master = new Branch("master");
        commits.Add(new Init("0", master));
        commits.Add(new Commit("1", master, commits[0]));
        var slave = new Branch("slave");
        var fakeCommit = new Commit("xxx", slave, commits[1]);
        commits.Add(new Commit("2", slave, fakeCommit));

        // Act
        var cut = Render(@<GitBranchTree Commits=@commits />);

        // Assert
        cut.Find("svg").MarkupMatches(
            @<svg width="40" height="60" >
            <circle cx="10" cy="50" r="3" >
                <title >0</title>
            </circle>
            <circle cx="10" cy="30" r="3" >
                <title >1</title>
            </circle>
            <path d="M 10 50 L 10 30" ></path>
            <circle cx="30" cy="10" r="3" >
                <title >2</title>
            </circle>
            <path d="M 30 70 L 30 10" ></path>
            </svg>
        );
    }

    [Fact]
    public void AddMergeCommitFromNonExistingBranchWithIncorrectPreviousCommit()
    {
        // Arrange
        var commits = new List<BaseCommit>();
        var master = new Branch("master");
        commits.Add(new Init("0", master));
        commits.Add(new Commit("1", master, commits[0]));
        var fakeCommit = new Commit("xxx", master, commits[1]);
        var slave = new Branch("slave");
        commits.Add(new Merge("2", slave, master, fakeCommit));

        // Act
        var cut = Render(@<GitBranchTree Commits=@commits />);

        // Assert
        cut.Find("span").MarkupMatches(@<span>Incorrect state. Previous commit is xxx for commit 2, but last point commit is 1.</span>);
    }

    [Fact]
    public void AddMergeCommitFromExistingBranchWithIncorrectPreviousCommit()
    {
        // Arrange
        var commits = new List<BaseCommit>();
        var master = new Branch("master");
        commits.Add(new Init("0", master));
        commits.Add(new Commit("1", master, commits[0]));
        var fakeCommit = new Commit("xxx", master, commits[1]);
        var slave = new Branch("slave");
        commits.Add(new Init("00", slave));
        commits.Add(new Merge("2", slave, master, fakeCommit));

        // Act
        var cut = Render(@<GitBranchTree Commits=@commits />);

        // Assert
        cut.Find("span").MarkupMatches(@<span>Incorrect state. Previous commit is xxx for commit 2, but last point commit is 1.</span>);
    }

    [Fact]
    public void AddMergeCommitFromExistingBranchWithCorrectPreviousCommit()
    {
        // Arrange
        var commits = new List<BaseCommit>();
        var master = new Branch("master");
        commits.Add(new Init("0", master));
        commits.Add(new Commit("1", master, commits[0]));
        var slave = new Branch("slave");
        commits.Add(new Merge("2", slave, master, commits[1]));

        // Act
        var cut = Render(@<GitBranchTree Commits=@commits />);

        // Assert
        cut.Find("svg").MarkupMatches(
            @<svg width="40" height="60" >
            <circle cx="10" cy="50" r="3" >
                <title >0</title>
            </circle>
            <circle cx="10" cy="30" r="3" >
                <title >1</title>
            </circle>
            <path d="M 10 50 L 10 30" ></path>
            <circle cx="10" cy="10" r="3" >
                <title >2</title>
            </circle>
            <path d="M 10 30 L 10 10" ></path>
            <path d="M 30 70 L 30 20 Q 30 10 20 10 L 10 10" ></path>
            </svg>
        );
    }

    [Fact]
    public void AddMergeCommitFromExistingBranchToNonExistingWithCorrectPreviousCommit()
    {
        // Arrange
        var commits = new List<BaseCommit>();
        var master = new Branch("master");
        commits.Add(new Init("0", master));
        commits.Add(new Commit("1", master, commits[0]));
        var slave = new Branch("slave");
        var fakeCommit = new Commit("xxx", slave, commits[0]);
        commits.Add(new Merge("2", master, slave, fakeCommit));

        // Act
        var cut = Render(@<GitBranchTree Commits=@commits />);

        // Assert
        cut.Find("svg").MarkupMatches(
            @<svg width="40" height="60" >
            <circle cx="10" cy="50" r="3" >
                <title >0</title>
            </circle>
            <circle cx="10" cy="30" r="3" >
                <title >1</title>
            </circle>
            <path d="M 10 50 L 10 30" ></path>
            <circle cx="30" cy="10" r="3" >
                <title >2</title>
            </circle>
            <path d="M 30 70 L 30 10" ></path>
            <path d="M 10 30 L 10 20 Q 10 10 20 10 L 30 10" ></path>
            </svg>
        );
    }

    [Fact]
    public void AddMergeCommitFromNonExistingBranchToNonExistingWithCorrectPreviousCommit()
    {
        // Arrange
        var commits = new List<BaseCommit>();
        var master = new Branch("master");
        var slave = new Branch("slave");
        var fakeCommit2 = new Init("xxxx", master);
        var fakeCommit = new Commit("xxx", slave, fakeCommit2);
        commits.Add(new Merge("2", master, slave, fakeCommit));

        // Act
        var cut = Render(@<GitBranchTree Commits=@commits />);

        // Assert
        cut.Find("svg").MarkupMatches(
            @<svg width="40" height="20" >
            <circle cx="10" cy="10" r="3" >
                <title >2</title>
            </circle>
            <path d="M 10 30 L 10 10" ></path>
            <path d="M 30 30 L 30 20 Q 30 10 20 10 L 10 10" ></path>
            </svg>
        );
    }
}
